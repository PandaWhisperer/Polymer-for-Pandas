//-
  This file contains only slides
  See _layout.jade for the layout and setup code

// add 
link(rel="stylesheet" href="styles/override.css")

slide.logoslide.nobackground
  article.flexbox.vcenter
    span
      img(src='images/pandastrike-logo-text.jpg')

slide.title-slide.segue.nobackground
  aside.gdbar
    img(src='images/pandastrike-logo-256.png')
  // The content of this hgroup is replaced programmatically through the slide_config.json.
  hgroup.auto-fadein
    h1(data-config-title='')
      // populated from slide_config.json
    h2(data-config-subtitle='')
      // populated from slide_config.json
    p(data-config-presenter='')
      // populated from slide_config.json

slide
  hgroup
    h2 Outline
  article
    :markdown
      * MVC vs. Component-based Design
      * Fundamentals of Web Components
      * Introduction to Polymer
      * [Case Study: Glideroom]

slide.fill(style="background-image: url('images/codecamp/Kung_Fu_Panda.jpg'); background-size: 80%; background-position: 355px 150px;")
  hgroup
    h2 About Me
  article
    :markdown
      * Started coding in high school (Turbo Pascal 6.0)
      * Professional developer since 2008
      * 2008-2010: Java / Spring
      * 2010-2013: Ruby / Rails
      * 2013-????: Node / CoffeeScript
      * Joined Panda Strike in 2014

slide.segue.dark.quote.nobackground
  aside.gdbar.right.bottom
    img(src='images/pandastrike-logo-256.png')
  hgroup(style="position: relative; top: 40px; bottom: 0;")
    h2 How did we get here?
  article.flexbox.vleft.auto-fadein
    q.
      ‘Where shall I begin, please, your Majesty’?
      ‘Begin at the beginning’, the King said gravely,
      ‘and go on till you come to the end: then stop.’
    .author Lewis Caroll, Alice’s Adventures in Wonderland

slide
  hgroup
    h2 1993: CGI 
    h3 "Dynamic" web sites are basically Perl scripts
  article.centered
    p(style="margin-bottom: 20px") No, not THIS kind of CGI
    img(src="images/codecamp/matrix-bullets.jpg")

slide
  hgroup
    h2 1995: PHP and JavaScript are released
    h3 Wild, Wild West in Frontend-Land
  article.flexbox.vcenter
    img.reflect(src="images/codecamp/PHP-logo.svg.png" width="400")
  aside.note
    ul
      li It's a time of lawlessness and folly
      li Spaghetti code abounds

slide
  hgroup
    h2 2006: jQuery brings some sanity
    h3 A new Sheriff in Town
  article.flexbox.vcenter
    img.reflect(src="images/codecamp/jQuery.png")
  aside.note
    ul
      li A new paradigm
      li The rise of the "jQuery Developer"
      li Plugins are awesome
      li Unfortunately, no encapsulation -> plugin hell!

slide
  hgroup
    h2 2010: MVC frameworks hit the scene
  article.flexbox.vcenter
    img(src="images/codecamp/BackboneJS_logo.png" width="600")
    img(src="images/codecamp/Ember.js-logo-and-mascot.png" width="200")
    img(src="images/codecamp/AngularJS.png")

slide
  hgroup
    h2 Why MVC?
  article.larger.flexbox.vleft
    ul
      li A way to structure code
      li Set of Best Practices
      li No more "where does this code go?"
      li Common denominator

slide
  hgroup
    h2 Why MVC in the browser?
  article.larger.flexbox.vleft
    ul
      li Basically: Rails was ultra-successful
      li Rails = MVC
      li Rails = GOOD
      li Therefore, MVC = GOOD?
    p.centered "What's good for the server is good for the browser"

slide
  hgroup
    h2 What's good for the server is good for the browser?
  article.larger.flexbox.vleft
    ul
      li "What's good for the browser is good for the server"
      li &nbsp; => Node.js
      li But does the reverse hold true?
      li.bold Not necessarily

slide
  hgroup
    h2 Problems with MVC in the browser
  article.larger.flexbox.vleft
    ul
      li In Rails, every request is handled by exactly ONE controller
      li On the frontend, pages are divided into several controllers
      li Controller hierarchies => entangled code
      li "Dumb" elements => everything is still a <code>div</code>

slide
  hgroup
    h2 What if there was a different way?
  article.larger
    ul
      li HTML already has "smart" elements
      li Dropdowns
        select
          option How much do you like Code Camp?
          option A little
          option A lot
          option OMG it's the best thing EVAR!!!1!
      li Checkboxes
        input(type="checkbox")
      li Radio buttons
        input(type="radio")
      li All of these provide:
        ul
          li User Interface
          li Interactivity
          li Configurability (<code>type</code>, <code>size</code>, etc.)
    ul.build
      p.bold.centered What if we could write our OWN elements?
  aside.note
    p make controls LARGER!

slide.segue.dark.nobackground
  aside.gdbar.right.bottom
    img(src='images/pandastrike-logo-256.png')
  hgroup
    h2 Enter Web Components
  article.flexbox.vcenter
    img(src="images/codecamp/web-components-logo.png")

slide
  hgroup
    h2 What are Web Components?
  article.larger.flexbox.vleft
    ul
      li A set of specs designed to enhance HTML
      li Enables developers to build custom elements
      li Provides proper encapsulation
      li Currently "in progress" at the W3C

slide
  hgroup
    h2 Core Technologies
  article.larger.flexbox.vleft
    ul
      li Custom Elements
      li Shadow DOM
      li HTML Imports

slide
  hgroup
    h2 Custom Elements
  article.larger.flexbox.vleft
    ul
      li Make your own HTML tags!
      li Allows developers to register new elements with the parser
      li Optional second argument specifies prototype

      pre.prettyprint(data-lang="javascript").
        // custom element names MUST include a hyphen (-)
        var MyAwesomeTag = document.registerElement("my-awesome-tag");
        // add it to the DOM
        document.body.appendChild(new MyAwesomeTag());

    h3 Result
    iframe#example0(data-src="examples/0/index.html" style="height: 70px")

slide
  hgroup
    h2 Shadow DOM
  article.larger.flexbox.vleft
    ul
      li Basically a "mini-DOM" for custom elements
      li Can be attached to ANY element
      li Provides separation and encapsulation
      li All element IDs, stylesheets, and JavaScript is scoped within
      li No more leaking style classes

    pre.prettyprint(data-lang="javascript").
      // Attach a Shadow DOM to &lt;my-awesome-tag>
      var element = document.querySelector('my-awesome-tag');
      var shadowRoot = element.createShadowRoot();

slide
  hgroup
    h2 HTML Imports
  article.larger.flexbox.vleft
    ul
      li Import another HTML document into your HTML document (yo dawg...)
      li A way to load your custom elements

      pre.prettyprint(data-lang="html").
        &lt;!-- imports my-awesome-tag.html into the DOM -->
        &lt;link rel="import" href="my-awesome-tag.html">

        &lt;script type="text/javascript">
          // contents of the import can be accessed like this
          document.querySelector('link[rel="import"]').import;
        &lt;/script>

slide.segue.dark.nobackground
  aside.gdbar.right.bottom
    img(src='images/pandastrike-logo-256.png')
  hgroup(style="bottom: 100px")
    h2 Introducing Polymer
  article.flexbox.vcenter
    img.reflect(src="images/codecamp/polymer-logo.svg", width="300")

slide
  hgroup
    h2  What is Polymer?
  article.flexbox.vcenter
    p.bold Mainly: a framework to simplify the creation of custom elements
    ul
      li Declarative element creation (No more <code>document.registerElement</code>)
      li Declarative event mapping
      li Declarative layout using attributes

  aside.note
    img(src="images/declare_all_the_things.jpg")

slide
  hgroup
    h2  But wait, there's more!
  article.flexbox.vleft.larger
    ul
      li Polyfills for old browsers
      li Component library
      li UI designer

    a.plain(href="https://www.polymer-project.org/tools/designer/")
      img(src="images/codecamp/polymer-designer.png")

slide
  hgroup
    h2 Anatomy of a Custom Element
  article
    ul
      li Polymer uses custom elements to define custom elements
      li <code>&lt;template></code> defines the contents of the Shadow DOM
      li <code>noscript</code> attribute lets us define elements without JavaScript

    pre.prettyprint(data-lang="html").
      &lt;!-- import Polymer -->
      &lt;link rel="import" href="polymer/polymer.html">
      &lt;!-- define custom element -->
      &lt;polymer-element name="my-element" noscript>
        &lt;template>
          &lt;h2>Hi, I'm a custom element!&lt;/h2>
        &lt;/template>
      &lt;/polymer-element>

  aside.note
    img(src="images/yo_dawg.jpg")

slide
  hgroup
    h2 Let's use it!
  article
    pre.prettyprint(data-lang="html").
      &lt;head>
        &lt;!-- load webcomponents polyfills -->
        &lt;script src="webcomponents/webcomponents.js">&lt;/script>
        &lt;!-- import custom elements -->
        &lt;link rel="import" href="polymer/polymer.html">
        &lt;link rel="import" href="my-element.html">
      &lt/head>

      &lt;body>
        &lt;my-element>&lt;/my-element>
      &lt;/body>

    h3 Result
    iframe#example1(data-src="examples/1/index.html" style="height: 70px")

slide(hidden)
  hgroup
    h2 Light &amp; Shadow
  article
    p <code>&lt;content></code> defines an insertion point
    p It will contain the contents of the custom tag (a.k.a Light DOM)

    pre.prettyprint(data-lang="html").
      &lt;polymer-element name="my-element" noscript>
        &lt;template>
          &lt;h2>Hi, I'm <b>&lt;content>&lt;/content></b>&lt;/h2>
        &lt;/template>
      &lt;/polymer-element>

    pre.prettyprint(data-lang="html").
      &lt;my-element>Light DOM&lt;/my-element>

    h3 Result
    iframe#example1(data-src="examples/1b/index.html" style="height: 70px")

slide
  hgroup
    h2 Data Binding
  article
    pre.prettyprint(data-lang="html").
      &lt;polymer-element name="my-element">
        &lt;template>
          &lt;h2><b>{{greeting}}</b>&lt;/h2>
        &lt;/template>
        &lt;script src="my-element.js">&lt;/script>
      &lt;/polymer-element>

    pre.prettyprint(data-lang="javascript").
      Polymer("my-element", {
        <b>greeting: "Hi, I'm a custom element!"</b>
      });

    h3 Result
    iframe#example2(data-src="examples/2/index.html" style="height: 70px")

  aside.note
    section
      ul
        li Use web console to manipulate the <code>greeting</code> attribute
        li Mention that bindings are TWO-WAY (for elements that support it)

slide
  hgroup
    h2 Declarative Event Mapping
  article
    pre.prettyprint(data-lang="html").
      &lt;polymer-element name="my-element" <b>on-click="{{clickHandler}}"</b>>
        &lt;template>
          &lt;h2>{{greeting}}&lt;/h2>
        &lt;/template>
        &lt;script src="my-element.js">&lt;/script>
      &lt;/polymer-element>

    pre.prettyprint(data-lang="javascript").
      Polymer("my-element", {
        greeting: "Click me!",
        <b>clickHandler: function() {
          this.greeting = "Hello, " + prompt("What is your name?") + "!";
        }</b>
      });

    iframe#example3(data-src="examples/3/index.html" style="height: 70px")

slide
  hgroup
    h2 Declarative Layout
    h3 Flexbox made simple
  article
    p Use attributes, not CSS!
    pre.prettyprint(data-lang="html").
      &lt;div horizontal layout>
        &lt;div>One&lt;/div>
        &lt;div>Two&lt;/div>
        &lt;div>Three&lt;/div>
      &lt;/div>

    p Result
    iframe(data-src="examples/flexbox/index1.html" style="height: 80px")

slide
  hgroup
    h2 Declarative Layout
    h3 Flexbox made simple
  article
    p Flex it!
    pre.prettyprint(data-lang="html").
      &lt;div horizontal layout>
        &lt;div>One&lt;/div>
        &lt;div flex>Two&lt;/div>
        &lt;div>Three&lt;/div>
      &lt;/div>

    p Result
    iframe(data-src="examples/flexbox/index2.html" style="height: 80px")

slide
  hgroup
    h2 Declarative Layout
    h3 Flexbox made simple
  article
    p Flex with proportions
    pre.prettyprint(data-lang="html").
      &lt;div horizontal layout>
        &lt;div flex>One&lt;/div>
        &lt;div flex two>Two&lt;/div>
        &lt;div flex three>Three&lt;/div>
      &lt;/div>

    p Result
    iframe(data-src="examples/flexbox/index3.html" style="height: 80px")

slide.segue.dark.nobackground
  aside.gdbar.right.bottom
    img(src='images/pandastrike-logo-256.png')
  hgroup.auto-fadein
    h2 Case Study
    h3 Glideroom.com

slide
  hgroup
    h2 Overview
    h3 What is Glideroom?
  article
   ul
     li Video conferencing in your browser
     li Built on WebRTC
     li NO registration necessary
     li Get a room with a single click
     li We call it: "Hangouts without the Hangups"

slide
  hgroup
    h2 Architecture
  article
    ul
      li Front-end built entirely with Polymer
      li Component-based architecture
      li Everything is a custom element
      li Emphasis on small, focused, reusable components
      li Components interact via well-defined public API
      li Asynchronous communication via events

slide
  hgroup
    h2 Show me the Code!
    h3 room.html
  article
    pre.prettyprint(data-lang="html").
      &lt;body>
        <b>&lt;glideroom-backend configuration="/configuration.json">&lt;/glideroom-backend></b>
        &lt;div vertical layout fit>
          &lt;glideroom-toolbar>&lt;/glideroom-toolbar>
          &lt;div horizontal layout flex>
            <b>&lt;glideroom-conference flex>&lt;/glideroom-conference></b>
            &lt;core-splitter direction="right" touch-action="none">&lt;/core-splitter>
            <b>&lt;glideroom-chat>&lt;/glideroom-chat></b>
          &lt;/div>
          &lt;footer-element>&lt;/footer-element>
        &lt;/div>
        &lt;glideroom-dialog-entry id="entry">&lt;/glideroom-dialog-entry>
        &lt;glideroom-dialog-settings id="settings">&lt;/glideroom-dialog-settings>
        &lt;script src="js/room.s">&lt;/script>
      &lt;/body>

slide
  hgroup
    h2 Show me the Code!
    h3 room.js
  article
    pre.prettyprint(data-lang="javascript").
      <b>var backend = document.querySelector("glideroom-backend");</b>
      var chat = document.querySelector("glideroom-chat");

      window.addEventListener("polymer-ready", function() {
        chat.addEventListener("chat-message", function(event) {
          backend.sendMessage(event.detail);
        });
        <b>backend.addEventListener("room-event", function(event) {
          chat.addMessage(event.detail);
          conference.processEvent(event.detail);
        });</b>
        backend.addEventListener("room-ready", function(event) {
          conference.start(event.detail);
        });
      });

slide.segue.dark.nobackground
  aside.gdbar.right.bottom
    img(src='images/pandastrike-logo-256.png')
  hgroup.auto-fadein
    h2 Resources

slide
  hgroup
    h2 RTFM
  article.smaller
    :markdown
      * Polymer
        - Polymer Project: [polymer-project.org](https://www.polymer-project.org)
        - Polymer API docs: [bit.ly/polymer-api](http://bit.ly/polymer-api)
        - Polymer Databinding: [bit.ly/polymer-databinding](http://bit.ly/polymer-databinding)
        - Polymer Layout Reference: [bit.ly/polymer-layout](http://bit.ly/polymer-layout)
      * Components
        - Core Elements: [bit.ly/core-elements](http://bit.ly/core-elements)
        - Core Elements Demo: [bit.ly/core-elements-demo](http://bit.ly/core-elements-demo)
        - Paper Elements: [bit.ly/paper-elements](http://bit.ly/paper-elements-demo)
        - Paper Elements Demo: [bit.ly/paper-elements-demo](http://bit.ly/paper-elements-demo)
      * Other Resources
        - Built with Polymer: [builtwithpolymer.org](http://builtwithpolymer.org)
        - Polymer Themes: [polymerthemes.com](https://polymerthemes.com)

slide.thank-you-slide.segue.nobackground
  aside.gdbar.right
    img(src='images/pandastrike-logo-256.png')
  article.flexbox.vleft.auto-fadein
    h2 &lt;Thank You!&gt;
    // p Important contact information goes here.
  p.auto-fadein(data-config-contact='')
    // populated from slide_config.json

slide.logoslide.dark.nobackground
  article.flexbox.vcenter
    span
      img(src='images/pandastrike-wide.png')
    a(href="http://www.pandastrike.com") www.pandastrike.com
    a(href="https://www.twitter.com/deliciousbamboo") @deliciousbamboo

slide.backdrop

script(type="text/javascript").
  // find all iframes and define shortcut variables according to their IDs
  [].slice.apply(document.querySelectorAll("iframe")).forEach(function(example) {
    window[example.id] = example;
  });

